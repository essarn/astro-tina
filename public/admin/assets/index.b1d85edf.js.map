{"version":3,"file":"index.b1d85edf.js","sources":["../../../vite/modulepreload-polyfill","../../../.tina/__generated__/app/src/lib/formify/index.ts","../../../.tina/__generated__/app/src/lib/machines/document-machine.ts","../../../.tina/__generated__/app/src/lib/machines/query-machine.ts","../../../.tina/__generated__/app/src/preview.tsx","../../../.tina/__generated__/prebuild/config.js","../../../.tina/__generated__/app/src/App.tsx","../../../.tina/__generated__/app/src/main.tsx"],"sourcesContent":["__VITE_IS_MODERN__&&(function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n}());","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as G from 'graphql'\n\ntype VisitorType = G.Visitor<G.ASTKindToNode, G.ASTNode>\ntype Info = { name: string; alias: string; fields?: Info[]; path?: string[] }\nexport type Blueprint2 = Info\n\nexport const formify = async ({\n  schema,\n  optimizedDocumentNode,\n}: {\n  schema: G.GraphQLSchema\n  optimizedDocumentNode: G.DocumentNode\n}): Promise<{\n  formifiedQuery: G.DocumentNode\n  blueprints: Blueprint2[]\n}> => {\n  const blueprints: Blueprint2[] = []\n  const visitor: VisitorType = {\n    OperationDefinition: (node) => {\n      if (!node.name) {\n        return {\n          ...node,\n          name: {\n            kind: 'Name',\n            // FIXME: add some sort of uuid to this\n            value: `QueryOperation`,\n          },\n        }\n      }\n      return node\n    },\n  }\n  const documentNodeWithName = G.visit(optimizedDocumentNode, visitor)\n  const optimizedQuery = documentNodeWithName as G.DocumentNode\n  const typeInfo = new G.TypeInfo(schema)\n\n  const addMetaFields: G.VisitFn<G.ASTNode, G.FieldNode> = (\n    node: G.FieldNode\n  ): G.ASTNode => {\n    return {\n      ...node,\n      selectionSet: {\n        ...(node.selectionSet || {\n          kind: 'SelectionSet',\n          selections: [],\n        }),\n        selections:\n          [...(node.selectionSet?.selections || []), ...metaFields] || [],\n      },\n    }\n  }\n\n  const getPath = (\n    path: readonly (string | number)[],\n    node: G.ASTNode | readonly G.ASTNode[]\n  ) => {\n    let currentLevel = node\n    const fieldPath: string[] = []\n    path.forEach((item) => {\n      // @ts-ignore not sure the best way to ensure this is indexable\n      currentLevel = currentLevel[item]\n      if (!Array.isArray(currentLevel)) {\n        // @ts-ignore FIXME this array check doesn't seem to be doing anything for the types\n        if (currentLevel.kind === 'Field') {\n          fieldPath.push(currentLevel.name.value)\n        }\n      }\n    })\n    return fieldPath\n  }\n\n  const addBlueprints: G.VisitFn<G.ASTNode, G.FieldNode> = (\n    node: G.FieldNode,\n    _key,\n    _parent,\n    path,\n    ancestors\n  ): void => {\n    const fieldPath = getPath(path, ancestors[0])\n    const nextInfo = (innerNode: G.FieldNode) => {\n      const fields: Info['fields'] = []\n      G.visit(\n        innerNode,\n        G.visitWithTypeInfo(typeInfo, {\n          Field: {\n            enter: (node) => {\n              typeInfo.enter(node)\n              if (node.name.value !== innerNode.name.value) {\n                if (node.selectionSet?.selections.length) {\n                  const subInfo = nextInfo(node)\n                  fields.push({\n                    name: node.name.value,\n                    alias: node.alias?.value || node.name.value,\n                    fields: subInfo.fields,\n                  })\n                  // Stop visiting this subtree, it'll be visited from the next nextInfo() call\n                  return false\n                } else {\n                  fields.push({\n                    name: node.name.value,\n                    alias: node.alias?.value || node.name.value,\n                  })\n                }\n              }\n            },\n            leave: (node) => {\n              typeInfo.leave(node)\n            },\n          },\n        })\n      )\n      if (fields?.length) {\n        return {\n          name: innerNode.name.value,\n          alias: innerNode.alias?.value || innerNode.name.value,\n          fields,\n        }\n      } else {\n        return {\n          name: innerNode.name.value,\n          alias: innerNode.alias?.value || innerNode.name.value,\n        }\n      }\n    }\n    const result = nextInfo(node)\n    const mergeFields = (fields: Info['fields']): Info['fields'] => {\n      if (!fields) {\n        return []\n      }\n      const groupBy = <T extends { [key: string]: any }>(\n        items: T[],\n        key: string\n      ) =>\n        items.reduce(\n          (result: { [key: string]: T[] }, item: T) => ({\n            ...result,\n            [item[key]]: [...(result[item[key]] || []), item],\n          }),\n          {}\n        )\n\n      const groups = groupBy(fields, 'alias') as { [name: string]: Info[] }\n      const groupedFields: Info[] = []\n      Object.entries(groups).forEach(([name, items]) => {\n        const subFields: Info[] = []\n        items.forEach((item) => {\n          item.fields?.forEach((field) => subFields.push(field))\n        })\n        const fieldName = items[0].name\n        const fieldAlias = items[0].alias\n        if (subFields?.length) {\n          groupedFields.push({\n            name: fieldName,\n            alias: fieldAlias,\n            fields: subFields,\n          })\n        } else {\n          groupedFields.push({ name: fieldName, alias: fieldAlias })\n        }\n      })\n      return groupedFields\n    }\n    const fields = mergeFields(result.fields)\n    if (\n      // blueprints.find(({ path }) =>\n      //   fieldPath.join('.').startsWith(path.join('.'))\n      // )\n      false\n    ) {\n      // skip because this is a nested blueperint\n    } else {\n      if (fields?.length) {\n        blueprints.push({\n          name: result.name,\n          alias: result.alias,\n          fields,\n          path: fieldPath,\n        })\n      } else {\n        blueprints.push({\n          name: result.name,\n          alias: result.alias,\n          path: fieldPath,\n        })\n      }\n    }\n  }\n\n  const formifyVisitor: VisitorType = {\n    InlineFragment: {\n      enter: (node) => {\n        typeInfo.enter(node)\n      },\n      leave: (node) => {\n        typeInfo.leave(node)\n      },\n    },\n    Field: {\n      enter: (node, key, parent, path, ancestors) => {\n        typeInfo.enter(node)\n        const type = typeInfo.getType()\n        if (type) {\n          const namedType = G.getNamedType(type)\n          if (G.isInterfaceType(namedType)) {\n            if (namedType.name === 'Node') {\n              return addMetaFields(node, key, parent, path, ancestors)\n            }\n          }\n          if (G.isUnionType(namedType)) {\n            const types = namedType.getTypes()\n            if (\n              types.every((type) => {\n                return type\n                  .getInterfaces()\n                  .some((intfc) => intfc.name === 'Node')\n              })\n            ) {\n              return addMetaFields(node, key, parent, path, ancestors)\n            }\n          }\n          if (G.isObjectType(namedType)) {\n            if (\n              namedType.getInterfaces().some((intfc) => intfc.name === 'Node')\n            ) {\n              return addMetaFields(node, key, parent, path, ancestors)\n            }\n          }\n        }\n      },\n    },\n  }\n  const blueprintVisitor: VisitorType = {\n    InlineFragment: {\n      enter: (node) => {\n        typeInfo.enter(node)\n      },\n      leave: (node) => {\n        typeInfo.leave(node)\n      },\n    },\n    Field: {\n      enter: (node, key, parent, path, ancestors) => {\n        typeInfo.enter(node)\n        const type = typeInfo.getType()\n        if (type) {\n          const namedType = G.getNamedType(type)\n          if (G.isInterfaceType(namedType)) {\n            if (namedType.name === 'Node') {\n              addBlueprints(node, key, parent, path, ancestors)\n              return false\n            }\n          }\n          if (G.isUnionType(namedType)) {\n            const types = namedType.getTypes()\n            if (\n              types.every((type) => {\n                return type\n                  .getInterfaces()\n                  .some((intfc) => intfc.name === 'Node')\n              })\n            ) {\n              addBlueprints(node, key, parent, path, ancestors)\n              return false\n            }\n          }\n          if (G.isObjectType(namedType)) {\n            if (\n              namedType.getInterfaces().some((intfc) => intfc.name === 'Node')\n            ) {\n              addBlueprints(node, key, parent, path, ancestors)\n              return false\n            }\n          }\n        }\n      },\n    },\n  }\n  const formifiedQuery = G.visit(\n    optimizedQuery,\n    G.visitWithTypeInfo(typeInfo, formifyVisitor)\n  )\n  G.visit(formifiedQuery, G.visitWithTypeInfo(typeInfo, blueprintVisitor))\n\n  return { formifiedQuery, blueprints }\n}\n\n/**\n * This is a dummy query which we pull apart and spread\n * back into the the selectionSet for all \"Node\" fields\n */\nconst node = G.parse(`\n query Sample {\n  ...on Document {\n    _internalSys: _sys {\n      path\n    }\n  }\n }`)\nconst metaFields: G.SelectionNode[] =\n  // @ts-ignore\n  node.definitions[0].selectionSet.selections\n","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { Client, Field, Form, FormOptions, TinaCMS } from 'tinacms'\nimport { assign, createMachine } from 'xstate'\nimport {\n  resolveForm,\n  Templateable,\n  TinaFieldEnriched,\n  TinaSchema,\n} from 'tinacms'\nimport { sendParent } from 'xstate/lib/actions'\n\nexport type FieldType = Field & TinaFieldEnriched\nexport type FormValues = Record<string, unknown>\nexport type FormType = Form<FormValues, FieldType>\n\nexport type DataType = Record<string, unknown>\n\ntype Data = {\n  _internalValues: object\n  _internalSys: {\n    breadcrumbs: string[]\n    basename: string\n    filename: string\n    path: string\n    extension: string\n    relativePath: string\n    title?: string\n    template: string\n    collection: {\n      name: string\n      slug: string\n      label: string\n      path: string\n      format: string\n      matches?: string\n      templates?: object\n      fields?: object\n      __typename: string\n    }\n  }\n}\n\ntype ContextType = {\n  id: string\n  data: null | Data\n  form: null | FormType\n  cms: TinaCMS\n  formifyCallback: (args: any, cms: TinaCMS) => Form\n}\n\nexport const documentMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QAoC2BDAxgCwJYDswBKAOgNwBdd0AbXALwKgGIIB7Qs-ANzYGswJNFjyFS5KrQZMEBXpnRUOAbQAMAXUSgADm1iVcHLSAAeiAEwAWSyUsA2VQE4AzAHYArABoQAT0QAORxJHEMdLd1d7d3NXWIBfOO9hHAJiLgMpRnwWMAAnXLZckm0aRQAzQtQhDBSxdMk6LKhZHjYFJXw1TSQQXX0O4zMEKxt7JzcvXwtVd2DQu2d-ZwBGVWX-dwTEkHw2CDhjZNE0iWpGpmM+gyMeoctzbz8EVaDLUNdAtfvIze2j1NIuTA6AgTx0emu+EGiEszlUtlcdncdnMkyey3WtlC-mWjmW7ncTlRCSSNWOpDyBVylwhA1uMLhCKRKLRFlxcxC4UiSJikRJIH+Yhp-UMUPpz38j0Q6y2cSAA */\n  createMachine(\n    {\n      tsTypes: {} as import('./document-machine.typegen').Typegen0,\n      schema: {\n        context: {} as ContextType,\n        services: {} as {\n          initializer: {\n            data: {\n              form: FormType | undefined\n              data: Data\n            }\n          }\n          scanner: {\n            data: {\n              data: object\n            }\n          }\n        },\n        events: {} as\n          | {\n              type: 'ADD_LOCATION'\n              value: string\n            }\n          | {\n              type: 'INIT'\n            }\n          | {\n              type: 'SCAN'\n            }\n          | {\n              type: 'RESCAN'\n            },\n      },\n      id: '(machine)',\n      initial: 'initializing',\n      states: {\n        initializing: {\n          invoke: {\n            src: 'initializer',\n            onDone: [\n              {\n                actions: ['storeFormAndData', 'notifyParent'],\n                target: 'ready',\n              },\n            ],\n            onError: [\n              {\n                actions: 'handleError',\n                target: 'error',\n              },\n            ],\n          },\n        },\n        ready: {},\n        error: {},\n      },\n    },\n    {\n      actions: {\n        notifyParent: sendParent((context) => {\n          return {\n            type: 'DOCUMENT_READY',\n            value: context.id,\n          }\n        }),\n        handleError: (_context, event) => {\n          console.error(event.data)\n        },\n        storeFormAndData: assign((context, event) => {\n          // context.cms.forms.add(event.data.form)\n          return { ...context, form: event.data.form, data: event.data.data }\n        }),\n      },\n      services: {\n        initializer: async (context) => {\n          const tina = context.cms.api.tina as Client\n          const response = await tina.request<{\n            node: Data\n          }>(\n            `query GetNode($id: String!) {\n        node(id: $id) {\n          ...on Document {\n            _internalValues: _values\n            _internalSys: _sys {\n              breadcrumbs\n              basename\n              filename\n              path\n              extension\n              relativePath\n              title\n              template\n              collection {\n                name\n                slug\n                label\n                path\n                format\n                matches\n                templates\n                fields\n                __typename\n              }\n              __typename\n            }\n          }\n        }\n      }`,\n            { variables: { id: context.id } }\n          )\n          const schema = context.cms.api.tina.schema as TinaSchema\n          if (!schema) {\n            throw new Error(`Schema must be provided`)\n          }\n          const collection = schema.getCollection(\n            response.node._internalSys.collection.name\n          )\n          let template: Templateable\n          if (collection.templates) {\n            template = collection.templates.find((template) => {\n              if (typeof template === 'string') {\n                throw new Error(`Global templates not supported`)\n              }\n              return template.name === response.node._internalSys.template\n            }) as Templateable\n          } else {\n            template = collection\n          }\n          if (!template) {\n            throw new Error(\n              `Unable to find template for node ${response.node._internalSys.path}`\n            )\n          }\n          const resolvedForm = resolveForm({\n            collection,\n            basename: response.node._internalSys.filename,\n            schema,\n            template,\n          })\n          const onSubmit = async (payload: Record<string, unknown>) => {\n            try {\n              const mutationString = `#graphql\n              mutation UpdateDocument($collection: String!, $relativePath: String!, $params: DocumentMutation!) {\n                updateDocument(collection: $collection, relativePath: $relativePath, params: $params) {\n                  __typename\n                }\n              }\n            `\n\n              await context.cms.api.tina.request(mutationString, {\n                variables: {\n                  collection: response.node._internalSys.collection.name,\n                  relativePath: response.node._internalSys.relativePath,\n                  params: schema.transformPayload(\n                    response.node._internalSys.collection.name,\n                    payload\n                  ),\n                },\n              })\n              context.cms.alerts.success('Document saved!')\n            } catch (e) {\n              context.cms.alerts.error(\n                'There was a problem saving your document'\n              )\n              console.error(e)\n            }\n          }\n          const formConfig = {\n            id: context.id,\n            label:\n              response.node._internalSys.title ||\n              response.node._internalSys.collection.label,\n            initialValues: response.node._internalValues,\n            fields: resolvedForm.fields,\n            onSubmit,\n          }\n          const formifyCallback = context.formifyCallback\n          const form = buildForm(\n            formConfig,\n            context.cms,\n            (args) => {\n              if (formifyCallback) {\n                return formifyCallback(args, context.cms)\n              } else {\n                return args.createForm(args.formConfig)\n              }\n            },\n            true,\n            onSubmit\n          )\n          return { form, data: response.node }\n        },\n      },\n    }\n  )\n\ntype FormCreator = (formConfig: FormOptions<any>) => Form\ninterface GlobalFormOptions {\n  icon?: any\n  layout: 'fullscreen' | 'popup'\n}\ntype GlobalFormCreator = (\n  formConfig: FormOptions<any>,\n  options?: GlobalFormOptions\n) => Form\ninterface GlobalFormOptions {\n  icon?: any\n  layout: 'fullscreen' | 'popup'\n}\nexport interface FormifyArgs {\n  formConfig: FormOptions<any>\n  createForm: FormCreator\n  createGlobalForm: FormCreator\n  skip?: () => void\n}\n\nexport type formifyCallback = (args: FormifyArgs, cms: TinaCMS) => Form | void\nexport type onSubmitArgs = {\n  /**\n   * @deprecated queryString is actually a mutation string, use `mutationString` instead\n   */\n  queryString: string\n  mutationString: string\n  variables: object\n}\n\nexport const generateFormCreators = (cms: TinaCMS, showInSidebar?: boolean) => {\n  const createForm = (formConfig: FormOptions<any, any>) => {\n    return new Form(formConfig)\n  }\n  const createGlobalForm: GlobalFormCreator = (\n    formConfig,\n    options?: { icon?: any; layout: 'fullscreen' | 'popup' }\n  ) => {\n    const form = new Form({\n      ...formConfig,\n      global: { global: true, ...options },\n    })\n    return form\n  }\n  return { createForm, createGlobalForm }\n}\n\nexport const buildForm = (\n  formConfig: any,\n  cms: TinaCMS,\n  formify: formifyCallback,\n  showInSidebar: boolean = false,\n  onSubmit?: (args: any) => void\n): FormType | undefined => {\n  const { createForm, createGlobalForm } = generateFormCreators(\n    cms,\n    showInSidebar\n  )\n  const SKIPPED = 'SKIPPED'\n  let form\n  let skipped\n  const skip = () => {\n    skipped = SKIPPED\n  }\n  if (skipped) return\n\n  if (formify) {\n    form = formify(\n      {\n        formConfig,\n        createForm,\n        createGlobalForm,\n        skip,\n      },\n      cms\n    )\n  } else {\n    form = createForm(formConfig)\n  }\n\n  if (!(form instanceof Form)) {\n    if (skipped === SKIPPED) {\n      return\n    }\n    throw new Error('formify must return a form or skip()')\n  }\n\n  return form\n}\n","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { assign, ContextFrom, createMachine, spawn } from 'xstate'\nimport {\n  Form,\n  TinaCMS,\n  NAMER,\n  Template,\n  TinaFieldEnriched,\n  TinaCollection,\n  TinaSchema,\n  GlobalFormPlugin,\n  Client,\n} from 'tinacms'\nimport * as G from 'graphql'\nimport { formify } from '../formify'\nimport { documentMachine, FieldType, FormValues } from './document-machine'\nimport type { ActorRefFrom } from 'xstate'\nimport { Blueprint2 } from '../formify'\n\nexport type DataType = Record<string, unknown>\ntype DocumentInfo = {\n  ref: ActorRefFrom<typeof documentMachine>\n}\ntype DocumentMap = {\n  [documentId: string]: DocumentInfo & {\n    /** We don't support nested forms or forms for list queries */\n    skipFormRegister: boolean\n  }\n}\n\ntype ContextType = {\n  id: null | string\n  data: null | DataType\n  cms: TinaCMS\n  selectedDocument: string | null\n  iframe: null | HTMLIFrameElement\n  formifyCallback: (args: any) => Form\n  documentMap: DocumentMap\n  blueprints: Blueprint2[]\n}\nexport const initialContext: Omit<ContextType, 'cms' | 'formifyCallback'> = {\n  id: null,\n  data: null,\n  selectedDocument: null,\n  blueprints: [],\n  documentMap: {},\n  iframe: null,\n}\nexport const queryMachine =\n  /** @xstate-layout N4IgpgJg5mDOIC5QAoC2BDAxgCwJYDswBKAOgFcAnAGxNwirAGIBlAUQBUB9AVQCUAZRKAAOAe1i4ALrlH4hIAB6IAjAAYALCXXqAnACZVAVmUAOAGxmAzMp1mANCACeidXpMkdnnSZvLDh1X11AF9ghzQsPEJSSho6BhYOTgBJADkABW4uPkEkEDEJaVl5JQQAdh0SMtVqvTqassN1M0MHZwRLdWUPLx8dPwCg0PCMHAJicmpaeiY2LgARZOZ0-gBBAE0eAXkCqRk5PNKyvRJVM-OL8+U2xD0mns8+gcC9ELCQCLHoybiZxm50vNVuxWFtciJxHtiodECZKqoLOpVMpjiYTGUyp0bghlGYyg9vL5-C83iNIuNSMJcMIwFRxtMEqt5vNOABFbisXjrHaQooHUBHPSWEiGSw6VSWUWYvRWHTYsro07nSzIpE+CrDD6jKITKk0umEBmzbgAIXmAHkAMLcACyrFS7GYPMK+xKiGOwtF4sllmlsuxOlcIquJlUJm04pMms+Osp1Np9PiTGSADFeKs7ZwbebuA7WPNnVD+YpEKKzCKFWG0dZkSZWk5YRKlWdDMc8f5SVryd89QnDQQ9ug6QAvAhQRgQWRgWj4ABuogA1tOYxSSL2DdOB9Ih7hR-goAgCPPMOg+QBtVQAXULfLdOLU+Neej8yksNdM9faCs0l3FrleorRtqq7rom+CDiOY6MGAFAUKIFBrlQp4AGbwagJArj28YbjOEG7mOh5zqIJ7nleN6ujC941CQT4vm+agftiZg6Piv4aHU6iAe8mG6th9IAO7oHs+6MBa1p2g6nC8KwTLcnkuy3pRygPjRrh0e+dbYspujNmcf4cU0QHdrx+r0jS+AQFBk79kRS4YcBWGmYa5mWfuhHHqe+wXte8m8hRAoqKYmiSn4Mr0bWn4qJYipeJ4gSto0zRGV8Jl9tOLlQTBcEIcISGSKhFDoTxcZOelYAWQRR7EZ5sjeeR0IBVRj5qcY4WMQ2OIIicbH-pxnbFWufGGhQYDoBAjj-ICwKgjk9XFqUlh4iQnS+kiOgJU09gdfo5YXCqyhqiiOjJbGg2lSQI1jRN0nZgAaqC7KcnJEIug1JYdEtK1lGtG3NNi6LuBc6gmHUophmUJ0gUN06XeNiT8KwloLFatr2uwc13sphgijYooJcpdRmCYWnKeWsXiutGKbZDjlpRdo1wymySsPwLKWgAEqsqQAOKsBjlGLfiX0-VTf0dcoMruIYoTvPgogQHA8gDbERr841ynuDK63WHclyWNihgGASTzEvoNMTLEavvcDumXBcB0Btj5PxaLZh6ObJV00mVulE02Nu7oROSs+XR6P9626a2MqNIZ3EOalOFbrgO57lAPuIH+VQ+M+0UaZF5SGLt5xR+2sdkilns4YJwlp75r3zRn3inDovoaAq6LSiTb4kCYb4qvoBh4sdcfGZXZnla5tcvUWmO+t0am99WDGaeL1juAqraGCDRg2O7I8V2ddOw+00+KY1GJaQY7jO5TiVmB7h84Vl8Hpzic9aM+i+98v+dlGoBIU1+vffep1QKEFfqKJidxdKmDDBGBEHtX6vFtnbM4DsOpCgAeTXowDQhAA */\n  createMachine(\n    {\n      tsTypes: {} as import('./query-machine.typegen').Typegen0,\n      schema: {\n        context: {} as ContextType,\n        services: {} as {\n          initializer: {\n            data: {\n              data: DataType\n              blueprints: Blueprint2[]\n            }\n          }\n          setter: {\n            data: { data: DataType }\n          }\n          subDocumentResolver: {\n            data: {\n              id: string\n              location: string\n            }[]\n          }\n          onChangeCallback: {\n            data: undefined\n          }\n        },\n        events: {} as\n          | {\n              type: 'IFRAME_MOUNTED'\n              value: HTMLIFrameElement\n            }\n          | {\n              type: 'SELECT_DOCUMENT'\n              value: string\n            }\n          | {\n              type: 'DOCUMENT_READY'\n              value: string\n            }\n          | {\n              type: 'NAVIGATE'\n            }\n          | {\n              type: 'ADD_QUERY'\n              value: {\n                id: string\n                type: 'open' | 'close'\n                query: string\n                data: object\n                variables: object\n              }\n            }\n          | {\n              type: 'REMOVE_QUERY'\n              value: string\n            }\n          | {\n              type: 'SUBDOCUMENTS'\n              value: { id: string; location: string }[]\n            }\n          | {\n              type: 'FIELD_CHANGE'\n            },\n      },\n      id: '(machine)',\n      type: 'parallel',\n      states: {\n        pipeline: {\n          initial: 'idle',\n          states: {\n            idle: {\n              entry: 'clear',\n              on: {\n                ADD_QUERY: {\n                  target: 'initializing',\n                },\n                SUBDOCUMENTS: {\n                  target: 'pending',\n                },\n                IFRAME_MOUNTED: {\n                  actions: 'setIframe',\n                },\n              },\n            },\n            initializing: {\n              invoke: {\n                src: 'initializer',\n                onDone: [\n                  {\n                    actions: 'storeInitialValues',\n                    target: 'pending',\n                  },\n                ],\n                onError: [\n                  {\n                    actions: 'handleError',\n                    target: 'error',\n                  },\n                ],\n              },\n            },\n            waiting: {\n              on: {\n                DOCUMENT_READY: {\n                  target: 'pending',\n                },\n              },\n            },\n            pending: {\n              invoke: {\n                src: 'setter',\n                onDone: [\n                  {\n                    target: 'ready',\n                  },\n                ],\n                onError: [\n                  {\n                    actions: 'handleMissingDocument',\n                    target: 'waiting',\n                  },\n                ],\n              },\n            },\n            ready: {\n              entry: 'resolveData',\n              invoke: {\n                src: 'onChangeCallback',\n              },\n              on: {\n                NAVIGATE: {\n                  target: 'idle',\n                },\n                REMOVE_QUERY: {\n                  target: 'idle',\n                },\n                SELECT_DOCUMENT: {\n                  actions: 'selectDocument',\n                },\n                FIELD_CHANGE: {\n                  target: 'pending',\n                },\n              },\n            },\n            error: {},\n          },\n        },\n      },\n    },\n    {\n      actions: {\n        handleError: (_context, event) => console.error(event.data),\n        handleMissingDocument: assign((context, event) => {\n          count = count + 1\n          if (count > 50) {\n            throw new Error('infinite loop')\n          }\n          if (event.data instanceof QueryError) {\n            if (context.documentMap[event.data.id]) {\n              // Already exists\n              return context\n            }\n            if (!event.data.id) {\n              return context\n            }\n            const doc = {\n              ref: spawn(\n                documentMachine.withContext({\n                  id: event.data.id,\n                  cms: context.cms,\n                  formifyCallback: context.formifyCallback,\n                  form: null,\n                  data: null,\n                })\n              ),\n            }\n\n            return {\n              ...context,\n              documentMap: {\n                ...context.documentMap,\n                [event.data.id]: {\n                  ...doc,\n                  skipFormRegister: event.data.skipFormRegister,\n                },\n              },\n            }\n          } else {\n            console.error(event.data)\n            return context\n          }\n        }),\n        clear: assign((context) => {\n          context.cms.forms.all().forEach((form) => {\n            context.cms.forms.remove(form.id)\n          })\n          return {\n            ...initialContext,\n            formifyCallback: context.formifyCallback,\n            cms: context.cms,\n            // documentMap: context.documentMap, // to preserve docs across pages\n            iframe: context.iframe,\n          }\n        }),\n        storeInitialValues: assign((context, event) => {\n          return {\n            ...context,\n            ...event.data,\n          }\n        }),\n        selectDocument: assign((context, event) => {\n          return {\n            ...context,\n            selectedDocument: event.value,\n          }\n        }),\n        setIframe: assign((context, event) => {\n          return {\n            ...context,\n            iframe: event.value,\n          }\n        }),\n        resolveData: assign((context, event) => {\n          if (context.iframe) {\n            context.iframe?.contentWindow?.postMessage({\n              type: 'updateData',\n              id: context.id,\n              data: event.data.data,\n            })\n          }\n          return {\n            ...context,\n            data: event.data.data,\n          }\n        }),\n      },\n      services: {\n        setter: async (context) => {\n          const walk = (obj: unknown, path: string[] = []) => {\n            const accum: Record<string, unknown> = {}\n            if (isScalar(obj)) {\n              return obj\n            }\n            Object.entries(obj as object).map(([key, value]) => {\n              if (Array.isArray(value)) {\n                accum[key] = value.map((item) => walk(item, [...path, key]))\n              } else {\n                const blueprint = context.blueprints.find(\n                  (bp) => bp.path?.join('.') === [...path, key].join('.')\n                )\n                if (blueprint) {\n                  accum[key] = setData(value, blueprint, context)\n                } else {\n                  accum[key] = walk(value, [...path, key])\n                }\n              }\n            })\n            return accum\n          }\n          const accum = walk(context.data)\n          return { data: accum }\n        },\n        initializer: async (context, event) => {\n          const tina = context.cms.api.tina as Client\n          const schema = await tina.getSchema()\n          const documentNode = G.parse(event.value.query)\n          const optimizedQuery = await tina.getOptimizedQuery(documentNode)\n          if (!optimizedQuery) {\n            throw new Error(`Unable to optimize query`)\n          }\n          const { blueprints, formifiedQuery } = await formify({\n            schema,\n            optimizedDocumentNode: optimizedQuery,\n          })\n          const data = (await context.cms.api.tina.request(\n            G.print(formifiedQuery),\n            {\n              variables: event.value.variables,\n            }\n          )) as DataType\n          return {\n            data,\n            blueprints,\n            id: event.value.id,\n          }\n        },\n        onChangeCallback: (context) => (callback, _onReceive) => {\n          const schema = context.cms.api.tina.schema as TinaSchema\n          Object.values(context.documentMap).forEach((documentMachine) => {\n            if (documentMachine.skipFormRegister) {\n              return\n            }\n            const documentContext = documentMachine.ref.getSnapshot()?.context\n            const collectionName =\n              documentContext?.data?._internalSys.collection.name\n\n            const collection = schema.getCollection(\n              collectionName || ''\n            ) as TinaCollection\n            if (documentContext?.form) {\n              if (collection.ui?.global) {\n                context.cms.plugins.add(\n                  new GlobalFormPlugin(documentContext.form)\n                )\n              } else {\n                context.cms.forms.add(documentContext.form)\n              }\n            }\n          })\n          if (context.cms) {\n            context.cms.events.subscribe(`forms:fields:onChange`, () => {\n              callback({ type: 'FIELD_CHANGE' })\n            })\n            context.cms.events.subscribe(`forms:reset`, () => {\n              callback({ type: 'FIELD_CHANGE' })\n            })\n          }\n        },\n      },\n    }\n  )\nclass QueryError extends Error {\n  public id: string\n  public skipFormRegister: boolean\n  constructor(message: string, id: string, skipFormRegister: boolean) {\n    super(message) // (1)\n    this.name = 'QueryError' // (2)\n    this.id = id\n    this.skipFormRegister = skipFormRegister\n  }\n}\nlet count = 0\n\n// https://github.com/oleics/node-is-scalar/blob/master/index.js\nconst withSymbol = typeof Symbol !== 'undefined'\nfunction isScalar(value: unknown) {\n  const type = typeof value\n  if (type === 'string') return true\n  if (type === 'number') return true\n  if (type === 'boolean') return true\n  if (withSymbol === true && type === 'symbol') return true\n\n  if (value == null) return true\n  if (withSymbol === true && value instanceof Symbol) return true\n  if (value instanceof String) return true\n  if (value instanceof Number) return true\n  if (value instanceof Boolean) return true\n\n  return false\n}\n\nconst setData = (\n  data: { [key: string]: unknown },\n  blueprint: Blueprint2,\n  context: ContextFrom<typeof queryMachine>\n) => {\n  if (data?._internalSys) {\n    const id = data._internalSys?.path\n    const doc = context.documentMap[id]\n    const docContext = doc?.ref?.getSnapshot()?.context\n    const form = docContext?.form\n    if (!form) {\n      const skipFormRegiester = (blueprint.path?.length || 0) > 2\n      throw new QueryError(\n        `Unable to resolve form for initial document`,\n        id,\n        skipFormRegiester\n      )\n    }\n    const _internalSys = docContext.data?._internalSys\n    if (!_internalSys) {\n      throw new Error(`No system information found for document ${id}`)\n    }\n\n    const fields = form.fields\n    const result = resolveForm({\n      id,\n      fields,\n      sys: _internalSys,\n      values: form.values,\n      fieldsToInclude: blueprint.fields,\n      context,\n    })\n    return { ...docContext.data, ...result }\n  } else {\n    // this isn't a node\n  }\n  return data\n}\n\nconst resolveForm = ({\n  id,\n  fields,\n  sys,\n  values,\n  fieldsToInclude,\n  context,\n}: {\n  id: string\n  fields: FieldType[]\n  sys: Record<string, unknown>\n  values: FormValues | undefined\n  fieldsToInclude: Blueprint2['fields']\n  context: ContextFrom<typeof queryMachine>\n}) => {\n  const accum: Record<string, unknown> = {}\n  if (!values) {\n    return accum\n  }\n\n  fieldsToInclude?.forEach((fieldToInclude) => {\n    const field = fields.find((field) => fieldToInclude.name === field.name)\n    if (!field) {\n      if (fieldToInclude.name === 'id') {\n        accum[fieldToInclude.alias] = id\n      } else if (fieldToInclude.name === '_sys') {\n        if (fieldToInclude.alias !== '_internalSys') {\n          const sysAccum: Record<string, unknown> = {}\n          // TODO: loop through these and actually use their alias values\n          fieldToInclude.fields?.forEach((field) => {\n            sysAccum[field.alias] = sys[field.name]\n          })\n          accum[fieldToInclude.alias] = sysAccum\n        }\n      } else if (fieldToInclude.name === '__typename') {\n        // field namespaces are one level deeper than what we need, so grab the first\n        // one and remove the last string on the namespace\n        accum[fieldToInclude.alias] = NAMER.dataTypeName(\n          fields[0].namespace.slice(0, fields[0].namespace.length - 1)\n        )\n      } else if (fieldToInclude.name === '_values') {\n        if (fieldToInclude.alias !== '_internalValues') {\n          accum[fieldToInclude.alias] = values\n        }\n      } else {\n      }\n    } else {\n      const result = resolveField({\n        id,\n        field,\n        sys,\n        value: values[field.name],\n        fieldsToInclude: fieldsToInclude.find(({ name }) => name === field.name)\n          ?.fields,\n        context,\n      })\n      if (result) {\n        accum[fieldToInclude.alias] = result\n      }\n    }\n  })\n\n  return accum\n}\nconst resolveField = ({\n  id,\n  field,\n  sys,\n  value,\n  fieldsToInclude,\n  context,\n}: {\n  id: string\n  field: TinaFieldEnriched\n  sys: Record<string, unknown>\n  value: unknown\n  fieldsToInclude: Blueprint2['fields']\n  context: ContextFrom<typeof queryMachine>\n}) => {\n  switch (field.type) {\n    case 'reference':\n      if (!value) {\n        return\n      }\n      if (typeof value === 'string') {\n        const doc = context.documentMap[value]\n        const docContext = doc?.ref?.getSnapshot()?.context\n        const form = docContext?.form\n        if (!form) {\n          throw new QueryError(\n            `Unable to resolve form for document`,\n            value,\n            true\n          )\n        }\n        const _internalSys = docContext.data?._internalSys\n        if (!_internalSys) {\n          throw new Error(`No system information found for document ${id}`)\n        }\n        return resolveForm({\n          id: value,\n          fields: form.fields,\n          sys: _internalSys,\n          values: form.values,\n          fieldsToInclude,\n          context,\n        })\n      }\n      throw new Error(`Unexpected value for type \"reference\"`)\n    case 'object':\n      if (field.fields) {\n        if (typeof field.fields === 'string') {\n          throw new Error('Global templates not supported')\n        }\n        field.fields\n        if (field.list) {\n          if (Array.isArray(value)) {\n            return value.map((item) => {\n              if (typeof field.fields === 'string') {\n                throw new Error('Global templates not supported')\n              }\n              return resolveForm({\n                id,\n                fields: field.fields,\n                sys,\n                values: item,\n                fieldsToInclude,\n                context,\n              })\n            })\n          }\n        } else {\n          return resolveForm({\n            id,\n            fields: field.fields,\n            sys,\n            values: value,\n            fieldsToInclude,\n            context,\n          })\n        }\n      }\n      if (field.templates) {\n        if (field.list) {\n          if (!value) {\n            return\n          }\n          if (!Array.isArray(value)) {\n            return\n          }\n          return value.map((item) => {\n            let t: Template<true>\n            Object.entries(field.templates).forEach(([name, template]) => {\n              if (name === item._template) {\n                if (typeof template === 'string') {\n                  throw new Error('Global templates not supported')\n                }\n                t = template\n              }\n            })\n            return {\n              _template: item._template,\n              ...resolveForm({\n                id,\n                fields: t.fields,\n                sys,\n                values: item,\n                fieldsToInclude,\n                context,\n              }),\n            }\n          })\n        } else {\n          // not supported yet\n        }\n      }\n    default:\n      return value\n  }\n}\n","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react'\nimport { useMachine } from '@xstate/react'\nimport { queryMachine, initialContext } from './lib/machines/query-machine'\nimport { useCMS, defineStaticConfig } from 'tinacms'\n\ntype Config = Parameters<typeof defineStaticConfig>[0]\n\ntype PostMessage = {\n  type: 'open' | 'close'\n  id: string\n  data: object\n}\n\nexport const Preview = (\n  props: Config & {\n    url: string\n    iframeRef: React.MutableRefObject<HTMLIFrameElement>\n  }\n) => {\n  const [activeQuery, setActiveQuery] = React.useState<PostMessage | null>(null)\n\n  React.useEffect(() => {\n    if (props.iframeRef.current) {\n      window.addEventListener('message', (event: MessageEvent<PostMessage>) => {\n        if (event.data.type === 'open') {\n          setActiveQuery(event.data)\n        }\n      })\n    }\n  }, [props.iframeRef.current])\n\n  return (\n    <div className=\"tina-tailwind\">\n      {activeQuery && (\n        <QueryMachine\n          key={activeQuery.id}\n          payload={activeQuery}\n          iframeRef={props.iframeRef}\n        />\n      )}\n      <div className=\"h-full overflow-scroll\">\n        <div className=\"\">\n          <div className=\"col-span-5 \">\n            <div className=\"h-screen flex flex-col\">\n              <div className=\"relative flex-1 bg-gray-300 col-span-2 overflow-scroll flex items-center justify-center\">\n                <iframe\n                  ref={props.iframeRef}\n                  className=\"h-full w-full bg-white\"\n                  src={props.url}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst QueryMachine = (props: {\n  payload: PostMessage\n  iframeRef: React.MutableRefObject<HTMLIFrameElement>\n}) => {\n  const cms = useCMS()\n\n  const machine = React.useMemo(\n    () =>\n      queryMachine.withContext({\n        ...initialContext,\n        cms,\n        // @ts-ignore FIXME: add formifyCallback args to Config type\n        formifyCallback: props.formifyCallback,\n      }),\n    []\n  )\n\n  const [state, send] = useMachine(machine)\n  React.useEffect(() => {\n    if (state.matches('pipeline.ready')) {\n      cms.events.dispatch({ type: 'forms:register', value: 'complete' })\n    } else if (state.matches('pipeline.initializing')) {\n      cms.events.dispatch({ type: 'forms:register', value: 'start' })\n    }\n  }, [JSON.stringify(state.value)])\n\n  React.useEffect(() => {\n    if (props.iframeRef.current) {\n      send({ type: 'IFRAME_MOUNTED', value: props.iframeRef.current })\n      if (props.payload.type === 'open') {\n        send({ type: 'ADD_QUERY', value: props.payload })\n      }\n      window.addEventListener('message', (event: MessageEvent<PostMessage>) => {\n        // useTinaHook cleans itself up when the component unmounts by sending a close message\n        if (event.data.type === 'close') {\n          send({ type: 'REMOVE_QUERY' })\n        }\n      })\n    }\n  }, [props.iframeRef.current])\n\n  return null\n}\n","import { defineStaticConfig as e } from \"tinacms\";\nconst o = e({\n  branch: process.env.CF_PAGES_BRANCH,\n  clientId: process.env.CLIENT_ID,\n  token: process.env.TOKEN,\n  build: {\n    outputFolder: \"admin\",\n    publicFolder: \"public\"\n  },\n  media: {\n    tina: {\n      mediaRoot: \"uploads\",\n      publicFolder: \"public\"\n    }\n  },\n  schema: {\n    collections: [\n      {\n        name: \"post\",\n        label: \"Posts\",\n        path: \"content/posts\",\n        fields: [\n          {\n            type: \"string\",\n            name: \"title\",\n            label: \"Title\",\n            isTitle: !0,\n            required: !0\n          },\n          {\n            type: \"rich-text\",\n            name: \"body\",\n            label: \"Body\",\n            isBody: !0\n          }\n        ]\n      }\n    ]\n  }\n});\nexport {\n  o as default\n};\n","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport TinaCMS, { TinaAdmin, useCMS } from 'tinacms'\nimport { TinaEditProvider, useEditState } from 'tinacms/dist/edit-state'\nimport { Preview } from './preview'\n\n// TODO: Resolve this to local file in tsconfig.json\n// @ts-expect-error\nimport config from 'TINA_IMPORT'\n\nconst SetPreview = ({ outputFolder }: { outputFolder: string }) => {\n  const cms = useCMS()\n  cms.flags.set('tina-preview', outputFolder)\n  return null\n}\n\nexport const TinaAdminWrapper = () => {\n  return (\n    // @ts-ignore JSX element type 'TinaCMS' does not have any construct or call signatures.ts(2604)\n    <TinaCMS {...config} client={{ apiUrl: __API_URL__ }}>\n      <SetPreview outputFolder={config.build.outputFolder} />\n      <TinaAdmin preview={Preview} config={config} />\n    </TinaCMS>\n  )\n}\n\nconst GoToEdit = () => {\n  const { setEdit } = useEditState()\n  setEdit(true)\n  return <div>Going into edit mode</div>\n}\n\nfunction App() {\n  return (\n    <TinaEditProvider editMode={<TinaAdminWrapper />}>\n      <GoToEdit />\n    </TinaEditProvider>\n  )\n}\nexport default App\n\n// import config from './config'\n\n// function App() {\n//   return (\n//     <div className=\"max-w-6xl mx-4 xl:mx-auto border rounded-md shadow-lg my-24 p-4 sm:p-12\">\n//       <pre>{JSON.stringify(config, null, 2)}</pre>\n//     </div>\n//   )\n// }\n\n// export default App\n","/**\nCopyright 2021 Forestry.io Holdings, Inc.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"names":["relList","link","processPreload","mutations","mutation","node","getFetchOpts","script","fetchOpts","formify","schema","optimizedDocumentNode","blueprints","optimizedQuery","G.visit","typeInfo","G.TypeInfo","addMetaFields","metaFields","getPath","path","currentLevel","fieldPath","item","addBlueprints","_key","_parent","ancestors","nextInfo","innerNode","fields","G.visitWithTypeInfo","subInfo","_a","_b","result","groups","items","key","groupedFields","name","subFields","field","fieldName","fieldAlias","formifyVisitor","parent","type","namedType","G.getNamedType","G.isInterfaceType","G.isUnionType","intfc","G.isObjectType","blueprintVisitor","formifiedQuery","G.parse","documentMachine","createMachine","sendParent","context","_context","event","assign","response","collection","template","resolvedForm","resolveForm","onSubmit","payload","mutationString","e","formConfig","formifyCallback","buildForm","args","generateFormCreators","cms","showInSidebar","Form","options","createForm","createGlobalForm","SKIPPED","form","skipped","skip","initialContext","queryMachine","count","QueryError","doc","spawn","walk","obj","accum","isScalar","value","blueprint","bp","setData","tina","documentNode","G.print","callback","_onReceive","documentContext","collectionName","_c","GlobalFormPlugin","message","id","skipFormRegister","withSymbol","data","docContext","skipFormRegiester","_d","_internalSys","_e","sys","values","fieldsToInclude","fieldToInclude","resolveField","sysAccum","NAMER","t","Preview","props","activeQuery","setActiveQuery","React","useState","useEffect","iframeRef","current","addEventListener","_jsx","QueryMachine","url","useCMS","machine","useMemo","withContext","state","send","useMachine","matches","events","dispatch","JSON","stringify","o","SetPreview","outputFolder","flags","set","TinaAdminWrapper","TinaCMS","config","apiUrl","__API_URL__","build","TinaAdmin","GoToEdit","setEdit","useEditState","App","TinaEditProvider","ReactDOM","render","document","getElementById"],"mappings":"qPAAqB,UAAoB,CACrC,MAAMA,EAAU,SAAS,cAAc,MAAM,EAAE,QAC/C,GAAIA,GAAWA,EAAQ,UAAYA,EAAQ,SAAS,eAAe,EAC/D,OAEJ,UAAWC,KAAQ,SAAS,iBAAiB,2BAA2B,EACpEC,EAAeD,CAAI,EAEvB,IAAI,iBAAkBE,GAAc,CAChC,UAAWC,KAAYD,EACnB,GAAIC,EAAS,OAAS,YAGtB,UAAWC,KAAQD,EAAS,WACpBC,EAAK,UAAY,QAAUA,EAAK,MAAQ,iBACxCH,EAAeG,CAAI,CAGvC,CAAK,EAAE,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,EAAI,CAAE,EACvD,SAASC,EAAaC,EAAQ,CAC1B,MAAMC,EAAY,CAAA,EAClB,OAAID,EAAO,YACPC,EAAU,UAAYD,EAAO,WAC7BA,EAAO,iBACPC,EAAU,eAAiBD,EAAO,gBAClCA,EAAO,cAAgB,kBACvBC,EAAU,YAAc,UACnBD,EAAO,cAAgB,YAC5BC,EAAU,YAAc,OAExBA,EAAU,YAAc,cACrBA,CACV,CACD,SAASN,EAAeD,EAAM,CAC1B,GAAIA,EAAK,GAEL,OACJA,EAAK,GAAK,GAEV,MAAMO,EAAYF,EAAaL,CAAI,EACnC,MAAMA,EAAK,KAAMO,CAAS,CAC7B,CACL,KCvBO,MAAMC,GAAU,MAAO,CAC5B,OAAAC,EACA,sBAAAC,CACF,IAMM,CACJ,MAAMC,EAA2B,CAAA,EAiB3BC,EADuBC,EAAQH,EAfR,CAC3B,oBAAsBN,GACfA,EAAK,KAUHA,EATE,CACL,GAAGA,EACH,KAAM,CACJ,KAAM,OAEN,MAAO,gBACT,CAAA,CAIN,CAEiE,EAE7DU,EAAW,IAAIC,GAAWN,CAAM,EAEhCO,EACJZ,GACc,OACP,MAAA,CACL,GAAGA,EACH,aAAc,CACZ,GAAIA,EAAK,cAAgB,CACvB,KAAM,eACN,WAAY,CAAC,CACf,EACA,WACE,CAAC,KAAIA,EAAAA,EAAK,eAALA,YAAAA,EAAmB,aAAc,CAAA,EAAK,GAAGa,EAAU,CAC5D,CAAA,CACF,EAGIC,EAAU,CACdC,EACAf,IACG,CACH,IAAIgB,EAAehB,EACnB,MAAMiB,EAAsB,CAAA,EACvB,OAAAF,EAAA,QAASG,GAAS,CAErBF,EAAeA,EAAaE,GACvB,MAAM,QAAQF,CAAY,GAEzBA,EAAa,OAAS,SACdC,EAAA,KAAKD,EAAa,KAAK,KAAK,CAE1C,CACD,EACMC,CAAA,EAGHE,EAAmD,CACvDnB,EACAoB,EACAC,EACAN,EACAO,IACS,CACT,MAAML,EAAYH,EAAQC,EAAMO,EAAU,EAAE,EACtCC,EAAYC,GAA2B,SAC3C,MAAMC,EAAyB,CAAA,EA+B/B,OA9BEhB,EACAe,EACAE,EAAoBhB,EAAU,CAC5B,MAAO,CACL,MAAQV,GAAS,WAEf,GADAU,EAAS,MAAMV,CAAI,EACfA,EAAK,KAAK,QAAUwB,EAAU,KAAK,MACjCxB,IAAAA,EAAAA,EAAK,eAALA,MAAAA,EAAmB,WAAW,OAAQ,CAClC,MAAA2B,EAAUJ,EAASvB,CAAI,EAC7ByB,OAAAA,EAAO,KAAK,CACV,KAAMzB,EAAK,KAAK,MAChB,QAAOA,EAAAA,EAAK,QAALA,YAAAA,EAAY,QAASA,EAAK,KAAK,MACtC,OAAQ2B,EAAQ,MAAA,CACjB,EAEM,EAAA,MAEPF,EAAO,KAAK,CACV,KAAMzB,EAAK,KAAK,MAChB,QAAOA,EAAAA,EAAK,QAALA,YAAAA,EAAY,QAASA,EAAK,KAAK,KAAA,CACvC,CAGP,EACA,MAAQA,GAAS,CACfU,EAAS,MAAMV,CAAI,CACrB,CACF,CAAA,CACD,CAAA,EAECyB,GAAAA,MAAAA,EAAQ,OACH,CACL,KAAMD,EAAU,KAAK,MACrB,QAAOI,EAAAJ,EAAU,QAAV,YAAAI,EAAiB,QAASJ,EAAU,KAAK,MAChD,OAAAC,CAAA,EAGK,CACL,KAAMD,EAAU,KAAK,MACrB,QAAOK,EAAAL,EAAU,QAAV,YAAAK,EAAiB,QAASL,EAAU,KAAK,KAAA,CAEpD,EAEIM,EAASP,EAASvB,CAAI,EAsCtByB,GArCeA,GAA2C,CAC9D,GAAI,CAACA,EACH,MAAO,GAcH,MAAAM,GAZU,CACdC,EACAC,IAEAD,EAAM,OACJ,CAACF,EAAgCZ,KAAa,CAC5C,GAAGY,EACH,CAACZ,EAAKe,IAAO,CAAC,GAAIH,EAAOZ,EAAKe,KAAS,CAAC,EAAIf,CAAI,CAAA,GAElD,CAAC,CAAA,GAGkBO,EAAQ,OAAO,EAChCS,EAAwB,CAAA,EACvB,cAAA,QAAQH,CAAM,EAAE,QAAQ,CAAC,CAACI,EAAMH,CAAK,IAAM,CAChD,MAAMI,EAAoB,CAAA,EACpBJ,EAAA,QAASd,GAAS,QACtBU,EAAAV,EAAK,SAAL,MAAAU,EAAa,QAASS,IAAUD,EAAU,KAAKC,EAAK,EAAC,CACtD,EACK,MAAAC,EAAYN,EAAM,GAAG,KACrBO,EAAaP,EAAM,GAAG,MACxBI,GAAA,MAAAA,EAAW,OACbF,EAAc,KAAK,CACjB,KAAMI,EACN,MAAOC,EACP,OAAQH,CAAA,CACT,EAEDF,EAAc,KAAK,CAAE,KAAMI,EAAW,MAAOC,EAAY,CAC3D,CACD,EACML,CAAA,GAEkBJ,EAAO,MAAM,EASlCL,GAAA,MAAAA,EAAQ,OACVlB,EAAW,KAAK,CACd,KAAMuB,EAAO,KACb,MAAOA,EAAO,MACd,OAAAL,EACA,KAAMR,CAAA,CACP,EAEDV,EAAW,KAAK,CACd,KAAMuB,EAAO,KACb,MAAOA,EAAO,MACd,KAAMb,CAAA,CACP,CAEL,EAGIuB,EAA8B,CAClC,eAAgB,CACd,MAAQxC,GAAS,CACfU,EAAS,MAAMV,CAAI,CACrB,EACA,MAAQA,GAAS,CACfU,EAAS,MAAMV,CAAI,CACrB,CACF,EACA,MAAO,CACL,MAAO,CAACA,EAAMiC,EAAKQ,EAAQ1B,EAAMO,IAAc,CAC7CZ,EAAS,MAAMV,CAAI,EACb,MAAA0C,EAAOhC,EAAS,UACtB,GAAIgC,EAAM,CACF,MAAAC,EAAYC,EAAeF,CAAI,EAkBjC,GAjBAG,EAAkBF,CAAS,GACzBA,EAAU,OAAS,QAIrBG,EAAcH,CAAS,GACXA,EAAU,WAEhB,MAAOD,GACJA,EACJ,gBACA,KAAMK,GAAUA,EAAM,OAAS,MAAM,CACzC,GAKDC,EAAeL,CAAS,GAExBA,EAAU,gBAAgB,KAAMI,GAAUA,EAAM,OAAS,MAAM,EAE/D,OAAOnC,EAAcZ,CAAkC,CAG7D,CACF,CACF,CAAA,EAEIiD,EAAgC,CACpC,eAAgB,CACd,MAAQjD,GAAS,CACfU,EAAS,MAAMV,CAAI,CACrB,EACA,MAAQA,GAAS,CACfU,EAAS,MAAMV,CAAI,CACrB,CACF,EACA,MAAO,CACL,MAAO,CAACA,EAAMiC,EAAKQ,EAAQ1B,EAAMO,IAAc,CAC7CZ,EAAS,MAAMV,CAAI,EACb,MAAA0C,EAAOhC,EAAS,UACtB,GAAIgC,EAAM,CACF,MAAAC,EAAYC,EAAeF,CAAI,EAoBjC,GAnBAG,EAAkBF,CAAS,GACzBA,EAAU,OAAS,QAKrBG,EAAcH,CAAS,GACXA,EAAU,WAEhB,MAAOD,GACJA,EACJ,gBACA,KAAMK,GAAUA,EAAM,OAAS,MAAM,CACzC,GAMDC,EAAeL,CAAS,GAExBA,EAAU,gBAAgB,KAAMI,GAAUA,EAAM,OAAS,MAAM,EAE/D,OAAA5B,EAAcnB,EAAMiC,EAAKQ,EAAQ1B,EAAMO,CAAS,EACzC,EAGb,CACF,CACF,CAAA,EAEI4B,EAAiBzC,EACrBD,EACAkB,EAAoBhB,EAAU8B,CAAc,CAAA,EAE9C/B,OAAAA,EAAQyC,EAAgBxB,EAAoBhB,EAAUuC,CAAgB,CAAC,EAEhE,CAAE,eAAAC,EAAgB,WAAA3C,EAC3B,EAMMP,GAAOmD,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOlB,EACGtC,GAEJb,GAAK,YAAY,GAAG,aAAa,WC5PtBoD,GAEXC,EACE,CACE,QAAS,CAAC,EACV,OAAQ,CACN,QAAS,CAAC,EACV,SAAU,CAAC,EAaX,OAAQ,CAAC,CAcX,EACA,GAAI,YACJ,QAAS,eACT,OAAQ,CACN,aAAc,CACZ,OAAQ,CACN,IAAK,cACL,OAAQ,CACN,CACE,QAAS,CAAC,mBAAoB,cAAc,EAC5C,OAAQ,OACV,CACF,EACA,QAAS,CACP,CACE,QAAS,cACT,OAAQ,OACV,CACF,CACF,CACF,EACA,MAAO,CAAC,EACR,MAAO,CAAC,CACV,CACF,EACA,CACE,QAAS,CACP,aAAcC,GAAYC,IACjB,CACL,KAAM,iBACN,MAAOA,EAAQ,EAAA,EAElB,EACD,YAAa,CAACC,EAAUC,IAAU,CACxB,QAAA,MAAMA,EAAM,IAAI,CAC1B,EACA,iBAAkBC,EAAO,CAACH,EAASE,KAE1B,CAAE,GAAGF,EAAS,KAAME,EAAM,KAAK,KAAM,KAAMA,EAAM,KAAK,IAAK,EACnE,CACH,EACA,SAAU,CACR,YAAa,MAAOF,GAAY,CAExB,MAAAI,EAAW,MADJJ,EAAQ,IAAI,IAAI,KACD,QAG1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA6BA,CAAE,UAAW,CAAE,GAAIA,EAAQ,GAAK,CAAA,EAE5BlD,EAASkD,EAAQ,IAAI,IAAI,KAAK,OACpC,GAAI,CAAClD,EACG,MAAA,IAAI,MAAM,yBAAyB,EAE3C,MAAMuD,EAAavD,EAAO,cACxBsD,EAAS,KAAK,aAAa,WAAW,IAAA,EAEpC,IAAAE,EAWJ,GAVID,EAAW,UACbC,EAAWD,EAAW,UAAU,KAAMC,GAAa,CAC7C,GAAA,OAAOA,GAAa,SAChB,MAAA,IAAI,MAAM,gCAAgC,EAElD,OAAOA,EAAS,OAASF,EAAS,KAAK,aAAa,QAAA,CACrD,EAEUE,EAAAD,EAET,CAACC,EACH,MAAM,IAAI,MACR,oCAAoCF,EAAS,KAAK,aAAa,MAAA,EAGnE,MAAMG,EAAeC,GAAY,CAC/B,WAAAH,EACA,SAAUD,EAAS,KAAK,aAAa,SACrC,OAAAtD,EACA,SAAAwD,CAAA,CACD,EACKG,EAAW,MAAOC,GAAqC,CACvD,GAAA,CACF,MAAMC,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAQvB,MAAMX,EAAQ,IAAI,IAAI,KAAK,QAAQW,EAAgB,CACjD,UAAW,CACT,WAAYP,EAAS,KAAK,aAAa,WAAW,KAClD,aAAcA,EAAS,KAAK,aAAa,aACzC,OAAQtD,EAAO,iBACbsD,EAAS,KAAK,aAAa,WAAW,KACtCM,CACF,CACF,CAAA,CACD,EACOV,EAAA,IAAI,OAAO,QAAQ,iBAAiB,QACrCY,GACPZ,EAAQ,IAAI,OAAO,MACjB,0CAAA,EAEF,QAAQ,MAAMY,CAAC,CACjB,CAAA,EAEIC,EAAa,CACjB,GAAIb,EAAQ,GACZ,MACEI,EAAS,KAAK,aAAa,OAC3BA,EAAS,KAAK,aAAa,WAAW,MACxC,cAAeA,EAAS,KAAK,gBAC7B,OAAQG,EAAa,OACrB,SAAAE,CAAA,EAEIK,EAAkBd,EAAQ,gBAchC,MAAO,CAAE,KAbIe,GACXF,EACAb,EAAQ,IACPgB,GACKF,EACKA,EAAgBE,EAAMhB,EAAQ,GAAG,EAEjCgB,EAAK,WAAWA,EAAK,UAAU,EAG1C,EAEF,EACe,KAAMZ,EAAS,IAAK,CACrC,CACF,CACF,CACF,EAgCWa,GAAuB,CAACC,EAAcC,KAc1C,CAAE,WAbWN,GACX,IAAIO,EAAKP,CAAU,EAYP,iBAVuB,CAC1CA,EACAQ,IAEa,IAAID,EAAK,CACpB,GAAGP,EACH,OAAQ,CAAE,OAAQ,GAAM,GAAGQ,CAAQ,CAAA,CACpC,IAMQN,GAAY,CACvBF,EACAK,EACArE,EACAsE,EAAyB,GACzBV,IACyB,CACnB,KAAA,CAAE,WAAAa,EAAY,iBAAAC,GAAqBN,GAGzC,EACMO,EAAU,UACZ,IAAAC,EACAC,EACJ,MAAMC,EAAO,IAAM,CACPD,EAAAF,CAAA,EAER,GAAA,CAAAE,EAgBA,IAdA7E,EACK4E,EAAA5E,EACL,CACE,WAAAgE,EACA,WAAAS,EACA,iBAAAC,EACA,KAAAI,CACF,EACAT,CAAA,EAGFO,EAAOH,EAAWT,CAAU,EAG1B,EAAEY,aAAgBL,GAAO,CAC3B,GAAIM,IAAYF,EACd,OAEI,MAAA,IAAI,MAAM,sCAAsC,CACxD,CAEO,OAAAC,EACT,ECxSaG,EAA+D,CAC1E,GAAI,KACJ,KAAM,KACN,iBAAkB,KAClB,WAAY,CAAC,EACb,YAAa,CAAC,EACd,OAAQ,IACV,EACaC,GAEX/B,EACE,CACE,QAAS,CAAC,EACV,OAAQ,CACN,QAAS,CAAC,EACV,SAAU,CAAC,EAoBX,OAAQ,CAAC,CAqCX,EACA,GAAI,YACJ,KAAM,WACN,OAAQ,CACN,SAAU,CACR,QAAS,OACT,OAAQ,CACN,KAAM,CACJ,MAAO,QACP,GAAI,CACF,UAAW,CACT,OAAQ,cACV,EACA,aAAc,CACZ,OAAQ,SACV,EACA,eAAgB,CACd,QAAS,WACX,CACF,CACF,EACA,aAAc,CACZ,OAAQ,CACN,IAAK,cACL,OAAQ,CACN,CACE,QAAS,qBACT,OAAQ,SACV,CACF,EACA,QAAS,CACP,CACE,QAAS,cACT,OAAQ,OACV,CACF,CACF,CACF,EACA,QAAS,CACP,GAAI,CACF,eAAgB,CACd,OAAQ,SACV,CACF,CACF,EACA,QAAS,CACP,OAAQ,CACN,IAAK,SACL,OAAQ,CACN,CACE,OAAQ,OACV,CACF,EACA,QAAS,CACP,CACE,QAAS,wBACT,OAAQ,SACV,CACF,CACF,CACF,EACA,MAAO,CACL,MAAO,cACP,OAAQ,CACN,IAAK,kBACP,EACA,GAAI,CACF,SAAU,CACR,OAAQ,MACV,EACA,aAAc,CACZ,OAAQ,MACV,EACA,gBAAiB,CACf,QAAS,gBACX,EACA,aAAc,CACZ,OAAQ,SACV,CACF,CACF,EACA,MAAO,CAAC,CACV,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,YAAa,CAACG,EAAUC,IAAU,QAAQ,MAAMA,EAAM,IAAI,EAC1D,sBAAuBC,EAAO,CAACH,EAASE,IAAU,CAEhD,GADA4B,EAAQA,EAAQ,EACZA,EAAQ,GACJ,MAAA,IAAI,MAAM,eAAe,EAE7B,GAAA5B,EAAM,gBAAgB6B,EAAY,CAKhC,GAJA/B,EAAQ,YAAYE,EAAM,KAAK,KAI/B,CAACA,EAAM,KAAK,GACP,OAAAF,EAET,MAAMgC,EAAM,CACV,IAAKC,GACHpC,GAAgB,YAAY,CAC1B,GAAIK,EAAM,KAAK,GACf,IAAKF,EAAQ,IACb,gBAAiBA,EAAQ,gBACzB,KAAM,KACN,KAAM,IAAA,CACP,CACH,CAAA,EAGK,MAAA,CACL,GAAGA,EACH,YAAa,CACX,GAAGA,EAAQ,YACX,CAACE,EAAM,KAAK,IAAK,CACf,GAAG8B,EACH,iBAAkB9B,EAAM,KAAK,gBAC/B,CACF,CAAA,CACF,KAEQ,gBAAA,MAAMA,EAAM,IAAI,EACjBF,CACT,CACD,EACD,MAAOG,EAAQH,IACbA,EAAQ,IAAI,MAAM,IAAA,EAAM,QAASyB,GAAS,CACxCzB,EAAQ,IAAI,MAAM,OAAOyB,EAAK,EAAE,CAAA,CACjC,EACM,CACL,GAAGG,EACH,gBAAiB5B,EAAQ,gBACzB,IAAKA,EAAQ,IAEb,OAAQA,EAAQ,MAAA,EAEnB,EACD,mBAAoBG,EAAO,CAACH,EAASE,KAC5B,CACL,GAAGF,EACH,GAAGE,EAAM,IAAA,EAEZ,EACD,eAAgBC,EAAO,CAACH,EAASE,KACxB,CACL,GAAGF,EACH,iBAAkBE,EAAM,KAAA,EAE3B,EACD,UAAWC,EAAO,CAACH,EAASE,KACnB,CACL,GAAGF,EACH,OAAQE,EAAM,KAAA,EAEjB,EACD,YAAaC,EAAO,CAACH,EAASE,IAAU,SACtC,OAAIF,EAAQ,UACF1B,GAAAD,EAAA2B,EAAA,SAAA,YAAA3B,EAAQ,gBAAR,MAAAC,EAAuB,YAAY,CACzC,KAAM,aACN,GAAI0B,EAAQ,GACZ,KAAME,EAAM,KAAK,IAAA,IAGd,CACL,GAAGF,EACH,KAAME,EAAM,KAAK,IAAA,CACnB,CACD,CACH,EACA,SAAU,CACR,OAAQ,MAAOF,GAAY,CACzB,MAAMkC,EAAO,CAACC,EAAc3E,EAAiB,CAAA,IAAO,CAClD,MAAM4E,EAAiC,CAAA,EACnC,OAAAC,GAASF,CAAG,EACPA,GAEF,OAAA,QAAQA,CAAa,EAAE,IAAI,CAAC,CAACzD,EAAK4D,CAAK,IAAM,CAC9C,GAAA,MAAM,QAAQA,CAAK,EACrBF,EAAM1D,GAAO4D,EAAM,IAAK3E,GAASuE,EAAKvE,EAAM,CAAC,GAAGH,EAAMkB,CAAG,CAAC,CAAC,MACtD,CACC,MAAA6D,EAAYvC,EAAQ,WAAW,KAClCwC,GAAO,OAAA,QAAAnE,EAAAmE,EAAG,OAAH,YAAAnE,EAAS,KAAK,QAAS,CAAC,GAAGb,EAAMkB,CAAG,EAAE,KAAK,GAAG,EAAA,EAEpD6D,EACFH,EAAM1D,GAAO+D,GAAQH,EAAOC,EAAWvC,CAAO,EAE9CoC,EAAM1D,GAAOwD,EAAKI,EAAO,CAAC,GAAG9E,EAAMkB,CAAG,CAAC,CAE3C,CAAA,CACD,EACM0D,EAAA,EAGF,MAAA,CAAE,KADKF,EAAKlC,EAAQ,IAAI,EAEjC,EACA,YAAa,MAAOA,EAASE,IAAU,CAC/B,MAAAwC,EAAO1C,EAAQ,IAAI,IAAI,KACvBlD,EAAS,MAAM4F,EAAK,YACpBC,EAAe/C,EAAQM,EAAM,MAAM,KAAK,EACxCjD,EAAiB,MAAMyF,EAAK,kBAAkBC,CAAY,EAChE,GAAI,CAAC1F,EACG,MAAA,IAAI,MAAM,0BAA0B,EAE5C,KAAM,CAAE,WAAAD,EAAY,eAAA2C,CAAe,EAAI,MAAM9C,GAAQ,CACnD,OAAAC,EACA,sBAAuBG,CAAA,CACxB,EAOM,MAAA,CACL,KAPY,MAAM+C,EAAQ,IAAI,IAAI,KAAK,QACvC4C,GAAQjD,CAAc,EACtB,CACE,UAAWO,EAAM,MAAM,SACzB,CAAA,EAIA,WAAAlD,EACA,GAAIkD,EAAM,MAAM,EAAA,CAEpB,EACA,iBAAmBF,GAAY,CAAC6C,EAAUC,IAAe,CACvD,MAAMhG,EAASkD,EAAQ,IAAI,IAAI,KAAK,OACpC,OAAO,OAAOA,EAAQ,WAAW,EAAE,QAASH,GAAoB,WAC9D,GAAIA,EAAgB,iBAClB,OAEF,MAAMkD,GAAkBlD,EAAAA,EAAgB,IAAI,YAAA,IAApBA,YAAAA,EAAmC,QACrDmD,GACJ1E,EAAAyE,GAAA,YAAAA,EAAiB,OAAjB,YAAAzE,EAAuB,aAAa,WAAW,KAE3C+B,EAAavD,EAAO,cACxBkG,GAAkB,EAAA,EAEhBD,GAAA,MAAAA,EAAiB,QACfE,EAAA5C,EAAW,KAAX,MAAA4C,EAAe,OACjBjD,EAAQ,IAAI,QAAQ,IAClB,IAAIkD,GAAiBH,EAAgB,IAAI,CAAA,EAG3C/C,EAAQ,IAAI,MAAM,IAAI+C,EAAgB,IAAI,EAE9C,CACD,EACG/C,EAAQ,MACVA,EAAQ,IAAI,OAAO,UAAU,wBAAyB,IAAM,CACjD6C,EAAA,CAAE,KAAM,cAAA,CAAgB,CAAA,CAClC,EACD7C,EAAQ,IAAI,OAAO,UAAU,cAAe,IAAM,CACvC6C,EAAA,CAAE,KAAM,cAAA,CAAgB,CAAA,CAClC,EAEL,CACF,CACF,CACF,EACF,MAAMd,UAAmB,KAAM,CAG7B,YAAYoB,EAAiBC,EAAYC,EAA2B,CAClE,MAAMF,CAAO,EACb,KAAK,KAAO,aACZ,KAAK,GAAKC,EACV,KAAK,iBAAmBC,CAC1B,CACF,CACA,IAAIvB,EAAQ,EAGZ,MAAMwB,EAAa,OAAO,OAAW,IACrC,SAASjB,GAASC,EAAgB,CAChC,MAAMnD,EAAO,OAAOmD,EAUpB,OATInD,IAAS,UACTA,IAAS,UACTA,IAAS,WACTmE,IAAe,IAAQnE,IAAS,UAEhCmD,GAAS,MACTgB,IAAe,IAAQhB,aAAiB,QACxCA,aAAiB,QACjBA,aAAiB,QACjBA,aAAiB,OAGvB,CAEA,MAAMG,GAAU,CACdc,EACAhB,EACAvC,IACG,eACH,GAAIuD,GAAA,MAAAA,EAAM,aAAc,CAChB,MAAAH,GAAK/E,EAAAkF,EAAK,eAAL,YAAAlF,EAAmB,KACxB2D,EAAMhC,EAAQ,YAAYoD,GAC1BI,GAAaP,GAAA3E,EAAA0D,GAAA,YAAAA,EAAK,MAAL,YAAA1D,EAAU,gBAAV,YAAA2E,EAAyB,QACtCxB,EAAO+B,GAAA,YAAAA,EAAY,KACzB,GAAI,CAAC/B,EAAM,CACT,MAAMgC,KAAqBC,EAAAnB,EAAU,OAAV,YAAAmB,EAAgB,SAAU,GAAK,EAC1D,MAAM,IAAI3B,EACR,8CACAqB,EACAK,CAAA,CAEJ,CACM,MAAAE,GAAeC,EAAAJ,EAAW,OAAX,YAAAI,EAAiB,aACtC,GAAI,CAACD,EACG,MAAA,IAAI,MAAM,4CAA4CP,GAAI,EAGlE,MAAMlF,EAASuD,EAAK,OACdlD,EAASiC,EAAY,CACzB,GAAA4C,EACA,OAAAlF,EACA,IAAKyF,EACL,OAAQlC,EAAK,OACb,gBAAiBc,EAAU,OAC3B,QAAAvC,CAAA,CACD,EACD,MAAO,CAAE,GAAGwD,EAAW,KAAM,GAAGjF,CAAO,CAGzC,CACO,OAAAgF,CACT,EAEM/C,EAAc,CAAC,CACnB,GAAA4C,EACA,OAAAlF,EACA,IAAA2F,EACA,OAAAC,EACA,gBAAAC,EACA,QAAA/D,CACF,IAOM,CACJ,MAAMoC,EAAiC,CAAA,EACvC,OAAK0B,IAIYC,GAAA,MAAAA,EAAA,QAASC,GAAmB,SACrC,MAAAlF,EAAQZ,EAAO,KAAMY,GAAUkF,EAAe,OAASlF,EAAM,IAAI,EACvE,GAAKA,EAwBE,CACL,MAAMP,EAAS0F,GAAa,CAC1B,GAAAb,EACA,MAAAtE,EACA,IAAA+E,EACA,MAAOC,EAAOhF,EAAM,MACpB,iBAAiBR,EAAAyF,EAAgB,KAAK,CAAC,CAAE,KAAAnF,CAAW,IAAAA,IAASE,EAAM,IAAI,IAAtD,YAAAR,EACb,OACJ,QAAA0B,CAAA,CACD,EACGzB,IACF6D,EAAM4B,EAAe,OAASzF,EAElC,SApCMyF,EAAe,OAAS,KAC1B5B,EAAM4B,EAAe,OAASZ,UACrBY,EAAe,OAAS,QAC7B,GAAAA,EAAe,QAAU,eAAgB,CAC3C,MAAME,EAAoC,CAAA,GAE3B7F,EAAA2F,EAAA,SAAA,MAAA3F,EAAQ,QAASS,GAAU,CAC/BA,EAAAA,EAAM,OAAS+E,EAAI/E,EAAM,KAAA,GAEpCsD,EAAM4B,EAAe,OAASE,CAChC,OACSF,EAAe,OAAS,aAG3B5B,EAAA4B,EAAe,OAASG,GAAM,aAClCjG,EAAO,GAAG,UAAU,MAAM,EAAGA,EAAO,GAAG,UAAU,OAAS,CAAC,CAAA,EAEpD8F,EAAe,OAAS,WAC7BA,EAAe,QAAU,oBAC3B5B,EAAM4B,EAAe,OAASF,EAiBpC,IAGK1B,CACT,EACM6B,GAAe,CAAC,CACpB,GAAAb,EACA,MAAAtE,EACA,IAAA+E,EACA,MAAAvB,EACA,gBAAAyB,EACA,QAAA/D,CACF,IAOM,WACJ,OAAQlB,EAAM,KAAM,CAClB,IAAK,YACH,GAAI,CAACwD,EACH,OAEE,GAAA,OAAOA,GAAU,SAAU,CACvB,MAAAN,EAAMhC,EAAQ,YAAYsC,GAC1BkB,GAAalF,GAAAD,EAAA2D,GAAA,YAAAA,EAAK,MAAL,YAAA3D,EAAU,gBAAV,YAAAC,EAAyB,QACtCmD,EAAO+B,GAAA,YAAAA,EAAY,KACzB,GAAI,CAAC/B,EACH,MAAM,IAAIM,EACR,sCACAO,EACA,EAAA,EAGE,MAAAqB,GAAeV,EAAAO,EAAW,OAAX,YAAAP,EAAiB,aACtC,GAAI,CAACU,EACG,MAAA,IAAI,MAAM,4CAA4CP,GAAI,EAElE,OAAO5C,EAAY,CACjB,GAAI8B,EACJ,OAAQb,EAAK,OACb,IAAKkC,EACL,OAAQlC,EAAK,OACb,gBAAAsC,EACA,QAAA/D,CAAA,CACD,CACH,CACM,MAAA,IAAI,MAAM,uCAAuC,EACzD,IAAK,SACH,GAAIlB,EAAM,OAAQ,CACZ,GAAA,OAAOA,EAAM,QAAW,SACpB,MAAA,IAAI,MAAM,gCAAgC,EAGlD,GADMA,EAAA,OACFA,EAAM,MACJ,GAAA,MAAM,QAAQwD,CAAK,EACd,OAAAA,EAAM,IAAK3E,GAAS,CACrB,GAAA,OAAOmB,EAAM,QAAW,SACpB,MAAA,IAAI,MAAM,gCAAgC,EAElD,OAAO0B,EAAY,CACjB,GAAA4C,EACA,OAAQtE,EAAM,OACd,IAAA+E,EACA,OAAQlG,EACR,gBAAAoG,EACA,QAAA/D,CAAA,CACD,CAAA,CACF,MAGH,QAAOQ,EAAY,CACjB,GAAA4C,EACA,OAAQtE,EAAM,OACd,IAAA+E,EACA,OAAQvB,EACR,gBAAAyB,EACA,QAAA/D,CAAA,CACD,CAEL,CACA,GAAIlB,EAAM,WACJA,EAAM,KAIR,MAHI,CAACwD,GAGD,CAAC,MAAM,QAAQA,CAAK,EACtB,OAEKA,EAAM,IAAK3E,GAAS,CACrB,IAAAyG,EACG,cAAA,QAAQtF,EAAM,SAAS,EAAE,QAAQ,CAAC,CAACF,EAAM0B,CAAQ,IAAM,CACxD,GAAA1B,IAASjB,EAAK,UAAW,CACvB,GAAA,OAAO2C,GAAa,SAChB,MAAA,IAAI,MAAM,gCAAgC,EAE9C8D,EAAA9D,CACN,CAAA,CACD,EACM,CACL,UAAW3C,EAAK,UAChB,GAAG6C,EAAY,CACb,GAAA4C,EACA,OAAQgB,EAAE,OACV,IAAAP,EACA,OAAQlG,EACR,gBAAAoG,EACA,QAAA/D,CAAA,CACD,CAAA,CACH,CACD,EAKP,QACS,OAAAsC,CACX,CACF,EC5lBa+B,GACXC,GAIG,CACH,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAMC,SAA6B,IAAI,EAE7ED,OAAAA,EAAME,UAAU,IAAM,CAChBL,EAAMM,UAAUC,SACXC,OAAAA,iBAAiB,UAAY5E,GAAqC,CACnEA,EAAMqD,KAAKpE,OAAS,QACtBqF,EAAetE,EAAMqD,IAAI,CAC3B,CACD,CAEF,EAAA,CAACe,EAAMM,UAAUC,OAAO,CAAC,IAG1B,MAAA,CAAK,UAAU,gBAAe,SAC3BN,CAAAA,GACCQ,EAACC,GAAY,CAEX,QAAST,EACT,UAAWD,EAAMM,SAFZL,EAAAA,EAAYnB,EAAE,IAKvB,MAAA,CAAK,UAAU,yBAAwB,WACrC,MAAA,CAAK,UAAU,GAAE,WACf,MAAA,CAAK,UAAU,cAAa,WAC1B,MAAA,CAAK,UAAU,yBAAwB,WACrC,MAAA,CAAK,UAAU,0FAAyF,WACtG,SAAA,CACE,IAAKkB,EAAMM,UACX,UAAU,yBACV,IAAKN,EAAMW,GAAAA,CAAI,CAAA,CACf,CAAA,CACE,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CAAA,CAAA,CACF,CAEV,EAEMD,GAAgBV,GAGhB,CACJ,MAAMpD,EAAMgE,IAENC,EAAUV,EAAMW,QACpB,IACEvD,GAAawD,YAAY,CACvB,GAAGzD,EACHV,IAAAA,EAEAJ,gBAAiBwD,EAAMxD,eAAAA,CACxB,EACH,CAAE,CAAA,EAGE,CAACwE,EAAOC,CAAI,EAAIC,GAAWL,CAAO,EACxCV,OAAAA,EAAME,UAAU,IAAM,CAChBW,EAAMG,QAAQ,gBAAgB,EAChCvE,EAAIwE,OAAOC,SAAS,CAAExG,KAAM,iBAAkBmD,MAAO,UAAA,CAAY,EACxDgD,EAAMG,QAAQ,uBAAuB,GAC9CvE,EAAIwE,OAAOC,SAAS,CAAExG,KAAM,iBAAkBmD,MAAO,OAAA,CAAS,CAChE,EACC,CAACsD,KAAKC,UAAUP,EAAMhD,KAAK,CAAC,CAAC,EAEhCmC,EAAME,UAAU,IAAM,CAChBL,EAAMM,UAAUC,UACbU,EAAA,CAAEpG,KAAM,iBAAkBmD,MAAOgC,EAAMM,UAAUC,OAAAA,CAAS,EAC3DP,EAAM5D,QAAQvB,OAAS,QACpBoG,EAAA,CAAEpG,KAAM,YAAamD,MAAOgC,EAAM5D,OAAAA,CAAS,EAE3CoE,OAAAA,iBAAiB,UAAY5E,GAAqC,CAEnEA,EAAMqD,KAAKpE,OAAS,SACjBoG,EAAA,CAAEpG,KAAM,cAAA,CAAgB,CAC/B,CACD,EAEF,EAAA,CAACmF,EAAMM,UAAUC,OAAO,CAAC,EAErB,IACT,EChHMiB,EAAIlF,GAAE,CACV,OAAQ,IAAW,OAAA,EAAC,gBACpB,SAAU,aAAY,UACtB,MAAO,IAAA,OAAA,EAAY,MACnB,MAAO,CACL,aAAc,QACd,aAAc,QACf,EACD,MAAO,CACL,KAAM,CACJ,UAAW,UACX,aAAc,QACf,CACF,EACD,OAAQ,CACN,YAAa,CACX,CACE,KAAM,OACN,MAAO,QACP,KAAM,gBACN,OAAQ,CACN,CACE,KAAM,SACN,KAAM,QACN,MAAO,QACP,QAAS,GACT,SAAU,EACX,EACD,CACE,KAAM,YACN,KAAM,OACN,MAAO,OACP,OAAQ,EACT,CACF,CACF,CACF,CACF,CACH,CAAC,EClBKmF,GAAa,CAAC,CAAEC,aAAAA,CAAuC,KAC/Cd,IACRe,MAAMC,IAAI,eAAgBF,CAAY,EACnC,MAGIG,GAAmB,MAG3BC,GAAO,CAAA,GAAKC,EAAQ,OAAQ,CAAEC,OAAQC,oFAAY,EAAE,SAAA,CACnDxB,EAACgB,GAAU,CAAC,aAAcM,EAAOG,MAAMR,YAAAA,CAAgB,EACvDjB,EAAC0B,GAAS,CAAC,QAASpC,GAAAA,OAASgC,CAAA,CAAkB,CAAA,CAAA,CAAA,EAK/CK,GAAW,IAAM,CACf,KAAA,CAAEC,QAAAA,GAAYC,GAAc,EAClCD,OAAAA,EAAQ,EAAI,IACL,MAAA,CAAA,SAAA,sBAAA,CAA+B,CACxC,EAEA,SAASE,IAAM,CACb,SACGC,GAAgB,CAAC,SAAU/B,EAACoB,GAAoB,EAAA,EAAA,SAC/CpB,EAAC2B,GAAQ,EAAA,CAAA,CACQ,CAEvB,CC/BAK,GAASC,OACNjC,EAAAN,EAAM,WAAU,CAAA,SACfM,EAAC8B,GAAG,EAAA,CAAG,CAAA,EAETI,SAASC,eAAe,MAAM,CAAC"}